Minimize Container Size And Simplify Deployments.
Baltic DevOps, Tallin 2015

Jan Nabbefeld
kreuzwerker
jan.nabbefeld@kreuzwerker.de
http://odise.github.io
@esido

* What is a container

- processes isolation on top of cgroups and namespaces 

- does not include a separate operating system

- different Docker base image flavors like _debian_, _ubuntu_ or _centos_

* Container foundation

- create a file system 
  $ debootstrap --verbose wheezy targetdir
  ...
  
  $ ls -al targetdir
  drwxr-xr-x  2 root root 4096 Dec 11  2012 bin
  drwxr-xr-x  2 root root 4096 Dec 24 13:41 boot
  ...
  drwxr-xr-x  9 root root 4096 Jun 22  2012 usr
  drwxr-xr-x 11 root root 4096 Dec 11  2012 var

- package it and create a Docker container

  $ cd targetdir
  $ sudo tar --numeric-owner -c . | docker import - debian:latest
  ce8f9fc3eba3239816f19dfb5c10d5524102b908519f2b5126a8e517afbd6b95

  ~/targetdir$ docker images
  REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
  debian              latest              ce8f9fc3eba3        7 seconds ago       218.6 MB

* Base image sizes

Some base image sizes:

- _archlinux_  *282.8MB*
- _centos:7_  *215.7MB*
- _ubuntu-debootstrap:15.04_  *110.1MB*
- _debian:wheezy_  *84.96MB*
- _busybox-curl_  *7.071MB*
- _alpine:3.1_  *5.025MB*
- _scratch_:  *0MB*

* The (artificial) Java case

Java application connecting to a MySQL database

- MySQL container
- Application container

Precondition: 

- no CI
- no Maven and friends
- just Docker containers and you

* JDBC Example
  
Code snippet:
  
  public class Example extends NanoHTTPD  { 
    public static void main(String[] argv) {

      Connection connection = null;

      connection = DriverManager
        .getConnection("jdbc:" + System.getenv("EXAMPLE_DATABASE"), 
            System.getenv("EXAMPLE_USER"), System.getenv("EXAMPLE_ROOT_PASSWORD"));

      Example server = new Example();
      server.start();

      Thread.sleep(Long.MAX_VALUE);
    }
  }

NanoHTTPD.java, mysql-connector-java.jar


* Build the JAR inside a container

.code ../debian/Dockerfile

The resulting image is ~ 600MB. 

* Build-container to minimize the image

  docker build -t example:jdk .
  docker run --name build_container example:jdk
  docker cp build_container:/opt/jar/Example.jar .
  docker cp build_container:/opt/jar/mysql-connector-java-5.1.35-bin.jar .
  docker rm build_container

Build a small image:

.code ../debian/Dockerfile.jre

Size of the _example:alpine_: 123MB

We need a mySQL database ...

* Docker Hub

.image mysql.png _ 800

Which image you are going to trust?

* Run the container:

We trust Docker Inc.:

  $ docker run \
    -e MYSQL_ROOT_PASSWORD=password \
    -e MYSQL_USER=root \
    -e MYSQL_DATABASE=test \
    --rm --name db docker.io/mysql

Let's link our container with the database container.

  $ docker run \
    --link db:db \
    -p 8089:8089 \
    -e EXAMPLE_ROOT_PASSWORD=password \
    -e EXAMPLE_USER=root \
    -e EXAMPLE_DATABASE=mysql://db:3306/test \
    --rm --name example example:alpine 
  -------- MySQL JDBC Connection Testing ------------
  MySQL JDBC Driver Registered!
  You made it, take control your database now!
  Type [CTRL]+[C] to quit!

* Deployment alias Simple Orchestration

* Must haves

- Container startup and restart (container dependencies)
- Container update
- Container logs

* Parts

Host deployment

- SSH keys
- Docker
- tools like tmux, nmap, vi etc.

Container deployment

- installation
- start and restart
- update
- configuration

* Host deployment

- image based 
- infrastructure deployment tools like Ansible, Chef, Puppet etc.
- cloud-init

* Container deployment 

- Ansible and friends can do this for you ...
- init scripts

We have two candidates: *Upstart* and *systemd*. 

Why? 

Because everybody can write init scripts!

* Example

* Splitting up

- container start and stop
- container update
- container content configuration

* Start, Stop, Restart - systemd

.code container.service

* Start, Stop, Restart - Upstart

.code container.conf

* Update

.code container-update.service

Fetching from a registry:

  /usr/bin/docker pull example:latest

or why not without having a registry:

  curl https://image-store.net/example:alpine:version-1.0.1 | docker import - example:latest

